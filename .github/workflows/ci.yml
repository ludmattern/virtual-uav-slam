# .github/workflows/ci.yml
name: CI

on:
  push:
    branches: ['main']
  pull_request:
    branches: ['main']
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      # 1) Récupérer le code
      - uses: actions/checkout@v4

      # 2) Se logger sur GHCR
      - name: Log in to GitHub Container Registry
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 3) Pull l’image existante (cache distant)
      - name: Pull remote cache image
        run: |
          docker pull ghcr.io/ludmattern/virtual-uav-slam:dev || true

      # 4) Build + cache-from + push
      - name: Build and push Docker image
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/ludmattern/virtual-uav-slam:dev
          cache-from: type=registry,ref=ghcr.io/ludmattern/virtual-uav-slam:dev
          cache-to: type=registry,ref=ghcr.io/ludmattern/virtual-uav-slam:dev,mode=max

      # 5) Test ROS 2 installation
      - name: Test ROS 2 installation
        run: |
          docker run --rm ghcr.io/ludmattern/virtual-uav-slam:dev \
            bash -c "source /opt/ros/humble/setup.bash && ros2 --help"

      # 6) Test talker/listener demo
      - name: Test talker/listener demo
        run: |
          docker run --rm ghcr.io/ludmattern/virtual-uav-slam:dev bash -c '
            set -eo pipefail
            source /opt/ros/humble/setup.bash

            # lancer le talker
            ros2 run demo_nodes_cpp talker >/dev/null 2>&1 &
            TALKER_PID=$!
            sleep 2

            # écouter pendant max 5 s
            timeout 5 bash -c "ros2 run demo_nodes_cpp listener | grep -m1 \"I heard:\""

            # arrêter le talker
            kill $TALKER_PID
          '
