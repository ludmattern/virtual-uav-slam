name: CI

on:
  push:       { branches: ['main'] }
  pull_request: { branches: ['main'] }
  workflow_dispatch:

jobs:
  build:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      # 1) Login GHCR
      - name: Log in to GHCR
        uses: docker/login-action@v2
        with:
          registry: ghcr.io
          username: ${{ github.actor }}
          password: ${{ secrets.GITHUB_TOKEN }}

      # 2) Installer QEMU + builder docker-container
      - uses: docker/setup-qemu-action@v2
      - uses: docker/setup-buildx-action@v2
        with: { driver: docker-container }

      # 3) Pull du cache (no-op si inexistant)
      - run: docker pull ghcr.io/ludmattern/virtual-uav-slam:dev-cache 2>/dev/null || true

      # 4) Build image + cache â†’ deux tags distincts
      - name: Build & push
        uses: docker/build-push-action@v4
        with:
          context: .
          push: true
          tags: ghcr.io/ludmattern/virtual-uav-slam:dev
          cache-from: type=registry,ref=ghcr.io/ludmattern/virtual-uav-slam:dev-cache
          cache-to:   type=registry,ref=ghcr.io/ludmattern/virtual-uav-slam:dev-cache,mode=max

      # 5) Tests sur l'image propre
      - name: Test ROS 2 installation
        run: |
          docker run --rm ghcr.io/ludmattern/virtual-uav-slam:dev \
            bash -c "source /opt/ros/humble/setup.bash && ros2 --help"

      - name: Test talker/listener demo
        run: |
          docker run --rm ghcr.io/ludmattern/virtual-uav-slam:dev bash -c '
            set -eo pipefail
            source /opt/ros/humble/setup.bash
            ros2 run demo_nodes_cpp talker >/dev/null 2>&1 & TALKER_PID=$!
            sleep 2
            timeout 5 bash -c "ros2 run demo_nodes_cpp listener | grep -m1 \"I heard:\""
            kill $TALKER_PID
          '
